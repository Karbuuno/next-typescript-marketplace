

generator client {
  provider = "prisma-client-js"
}




datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           String?   @default("user")
  accounts       Account[]
  sessions       Session[]
  product         Product[]
  order          Order[]
  buyer          Offer[] @relation("Buyer")
  seller          Offer[] @relation("Seller")
 
  
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Category {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Subcategory Subcategory[]
  Product Product[]
}
model Subcategory {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  categoryId    String      @db.ObjectId
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product Product[]
}

model Product {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  categoryId    String      @db.ObjectId
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sellerId    String      @db.ObjectId
  user      User    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  subcategoryId    String      @db.ObjectId
  subcategory      Subcategory    @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  color        String
  brand        String
  size       String
  condition String
  location String
  thumbnail     String
  gallery       String[]
  price         Float
  description   String
  status        String      @default("visible")
  Order        Order[]
  Offer       Offer[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  color        String
  brand        String
  price         Float
  status    String      @default("pending")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

}
model Offer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  productId  String    @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyerId        String    @db.ObjectId
  buyer      User      @relation("Buyer",fields: [buyerId], references: [id], onDelete: Cascade)
  sellerId   String    @db.ObjectId
  seller          User      @relation("Seller",fields: [sellerId], references: [id], onDelete: Cascade)
  price      Float
  status     String    @default("pending") 
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}